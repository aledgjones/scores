@font-face {
  font-family: "Quicksand";
  font-style: normal;
  font-weight: 300;
  font-display: swap;
  src: url(./assets/quicksand.woff) format("woff");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA,
    U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215,
    U+FEFF, U+FFFD;
}

/*Hat tip to @thierrykoblentz for this approach: https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/ */
html {
  box-sizing: border-box;
  /* Nicer looking fonts for OS X and iOS */
  -webkit-font-smoothing: antialiased;
}

/*Yes, the universal selector. No, it isn't slow: https://benfrain.com/css-performance-revisited-selectors-bloat-expensive-styles/*/
* {
  /*This prevents users being able to select text. Stops long presses in iOS bringing up copy/paste UI for example. Note below we specifically switch user-select on for inputs for the sake of Safari. Bug here: https://bugs.webkit.org/show_bug.cgi?id=82692*/
  user-select: none;
  /*This gets -webkit specific prefix as it is a non W3C property*/
  -webkit-tap-highlight-color: rgba(255, 255, 255, 0);
  /*Older Androids need this instead*/
  -webkit-tap-highlight-color: transparent;
  /* Most devs find border-box easier to reason about. However by inheriting we can mix box-sizing approaches.*/
  box-sizing: inherit;
}

*:before,
*:after {
  box-sizing: inherit;
}

/* Switching user-select on for inputs and contenteditable specifically for Safari (see bug link above)*/
input[type],
[contenteditable] {
  user-select: text;
}

body,
h1,
h2,
h3,
h4,
h5,
h6,
p {
  /*We will be adding our own margin to these elements as needed.*/
  margin: 0;
  /*You'll want to set font-size as needed.*/
  font-size: 1rem;
  /*No bold for h tags unless you want it*/
  font-weight: 400;
}

/* 
Thanks to L. David Baron for this:
https://twitter.com/davidbaron/status/794138427952222210 */
base,
basefont,
datalist,
head,
meta,
script,
style,
title,
noembed,
param,
template {
  display: none;
}

a {
  text-decoration: none;
  color: inherit;
}

/*No bold for b tags by default*/
b {
  font-weight: 400;
}

/*Prevent these elements having italics by default*/
em,
i {
  font-style: normal;
}

/*IMPORTANT: This removes the focus outline for most browsers. Be aware this is a backwards accessibilty step! Mozilla (i.e. Firefox) also adds a dotted outline around a tags and buttons when they receive tab focus which I haven't found an unhacky way of removing.*/
a:focus,
button:focus {
  outline: 0;
}

/* The button element tends to get a lot of default styles which we largely undo here. We set text-alignment (usually set to center by UA style sheet) and the font-family to inherit from your own styles instead. */
button {
  appearance: none;
  background-color: transparent;
  border: 0;
  padding: 0;
  text-align: inherit;
  font-family: inherit;
  /* Safari adds margin */
  margin: 0;
}

input,
fieldset {
  appearance: none;
  border: 0;
  padding: 0;
  margin: 0;
  /*inputs and fieldset defaults to having a min-width equal to its content in Chrome and Firefox (https://code.google.com/p/chromium/issues/detail?id=560762), we may not want that*/
  min-width: 0;
  /*Reset the font size and family*/
  font-size: 1rem;
  font-family: inherit;
}

/* For IE, we want to remove the default cross ('X') that appears in input fields when a user starts typing - Make sure you add your own! */
input::-ms-clear {
  display: none;
}

/*This switches the default outline off when an input receives focus (really important for users tabbing through with a keyboard) so ensure you put something decent in for your input focus instead!!*/
input:focus {
  outline: 0;
}

input[type="number"] {
  /*Mozilla shows the spinner UI on number inputs unless we use this:*/
  -moz-appearance: textfield;
}

/*Removes the little spinner controls for number type inputs (WebKit browsers/forks only)*/
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  appearance: none;
}

/*SVG defaults to display: inline which I dislike. Inline-block or inline-flex will render white space on SVG elements in HTML (where you would have defs and symbols) if the container isn't a flex box or the font-size set to 0 to crush the whitespace */
svg {
  display: block;
}

img {
  /*Make images behave responsively. Here they will scale up to 100% of their natural size*/
  max-width: 100%;
  /*Make images display as a block (UA default is usually inline)*/
  display: block;
}

/*Removes the default focusring that Mozilla places on select items. From: http://stackoverflow.com/a/18853002/1147859 
Ensure you set `#000` to the colour you want your text to appear */
select:-moz-focusring {
  color: transparent;
  text-shadow: 0 0 0 #000;
}

/* Mozilla also has its own focus inner for buttons which doesn't take into account padding by default. This sets it so padding is included */
button::-moz-focus-inner {
  padding: inherit;
}

/* Switching on box-sizing: border-box by default; toggle this off if you want more granular control */
body {
  box-sizing: border-box;
  font-family: Quicksand, sans-serif;
}

html,
body {
  overscroll-behavior-y: contain;
}

:root {
  --primary: 0, 123, 255;
  --on-primary: #fff;

  --secondary: 151, 45, 225;
  --on-secondary: #fff;

  --error: 245, 54, 92;
  --on-error: #fff;

  --black: rgb(50, 50, 50);

  --padding: 30px;
  --border-radius: 26px;
  --shadow: 0 2px 5px 0 rgba(25, 25, 25, 0.07),
    0 3px 4px -2px rgba(25, 25, 25, 0.1), 0 1px 8px 0 rgba(25, 25, 25, 0.06);
  --shadow-hover: 0 10px 20px -12px rgba(50, 50, 50, 0.42),
    0 4px 20px 0px rgba(50, 50, 50, 0.12), 0 8px 10px -5px rgba(50, 50, 50, 0.2);
}
